//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MS.MVC.MS.Park.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class FOXPRODEVEntities : DbContext
    {
        public FOXPRODEVEntities()
            : base("name=FOXPRODEVEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AGENBALANCFY> AGENBALANCFies { get; set; }
        public virtual DbSet<AGENCCALC> AGENCCALCS { get; set; }
        public virtual DbSet<AGENCy> AGENCIES { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<CALTYPE> CALTYPES { get; set; }
        public virtual DbSet<TestTable> TestTables { get; set; }
        public virtual DbSet<BENEFIT> BENEFITS { get; set; }
        public virtual DbSet<FUNDTYPE> FUNDTYPES { get; set; }
        public virtual DbSet<Grant> Grants { get; set; }
        public virtual DbSet<INTEREST> INTERESTs { get; set; }
        public virtual DbSet<R_CARA_TABLE> R_CARA_TABLE { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TRANSACTIONTYPE> TRANSACTIONTYPES { get; set; }
        public virtual DbSet<YOUTHCREDITTYPE> YOUTHCREDITTYPEs { get; set; }
        public virtual DbSet<CARA> CARAs { get; set; }
        public virtual DbSet<CARA_FINAL> CARA_FINAL { get; set; }
        public virtual DbSet<CARAMTCEST> CARAMTCESTs { get; set; }
        public virtual DbSet<CARAYEGTRA> CARAYEGTRAs { get; set; }
        public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
    
        public virtual int addAgenBen(Nullable<double> bascode, Nullable<double> age_code, Nullable<double> bas, Nullable<double> fee, Nullable<double> average, string lupd_user)
        {
            var bascodeParameter = bascode.HasValue ?
                new ObjectParameter("bascode", bascode) :
                new ObjectParameter("bascode", typeof(double));
    
            var age_codeParameter = age_code.HasValue ?
                new ObjectParameter("age_code", age_code) :
                new ObjectParameter("age_code", typeof(double));
    
            var basParameter = bas.HasValue ?
                new ObjectParameter("bas", bas) :
                new ObjectParameter("bas", typeof(double));
    
            var feeParameter = fee.HasValue ?
                new ObjectParameter("fee", fee) :
                new ObjectParameter("fee", typeof(double));
    
            var averageParameter = average.HasValue ?
                new ObjectParameter("average", average) :
                new ObjectParameter("average", typeof(double));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addAgenBen", bascodeParameter, age_codeParameter, basParameter, feeParameter, averageParameter, lupd_userParameter);
        }
    
        public virtual int addAgenFunds(Nullable<double> aGE_CODE, Nullable<double> fTP_CODE, Nullable<double> aMT, string cOMMENTS, string lUPD_USER)
        {
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(double));
    
            var fTP_CODEParameter = fTP_CODE.HasValue ?
                new ObjectParameter("FTP_CODE", fTP_CODE) :
                new ObjectParameter("FTP_CODE", typeof(double));
    
            var aMTParameter = aMT.HasValue ?
                new ObjectParameter("AMT", aMT) :
                new ObjectParameter("AMT", typeof(double));
    
            var cOMMENTSParameter = cOMMENTS != null ?
                new ObjectParameter("COMMENTS", cOMMENTS) :
                new ObjectParameter("COMMENTS", typeof(string));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addAgenFunds", aGE_CODEParameter, fTP_CODEParameter, aMTParameter, cOMMENTSParameter, lUPD_USERParameter);
        }
    
        public virtual int addbenefits(Nullable<System.DateTime> entered, Nullable<System.DateTime> processed, string tc, string td, string reference, Nullable<double> bas, Nullable<double> average, string comments, string lupd_user)
        {
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("entered", entered) :
                new ObjectParameter("entered", typeof(System.DateTime));
    
            var processedParameter = processed.HasValue ?
                new ObjectParameter("processed", processed) :
                new ObjectParameter("processed", typeof(System.DateTime));
    
            var tcParameter = tc != null ?
                new ObjectParameter("tc", tc) :
                new ObjectParameter("tc", typeof(string));
    
            var tdParameter = td != null ?
                new ObjectParameter("td", td) :
                new ObjectParameter("td", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var basParameter = bas.HasValue ?
                new ObjectParameter("bas", bas) :
                new ObjectParameter("bas", typeof(double));
    
            var averageParameter = average.HasValue ?
                new ObjectParameter("average", average) :
                new ObjectParameter("average", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addbenefits", enteredParameter, processedParameter, tcParameter, tdParameter, referenceParameter, basParameter, averageParameter, commentsParameter, lupd_userParameter);
        }
    
        public virtual int addGrants(string con, string con2, string grant_num, Nullable<double> amount, Nullable<System.DateTime> period_from, Nullable<System.DateTime> period_to, string locode, string supdist, string objcode, string eo)
        {
            var conParameter = con != null ?
                new ObjectParameter("con", con) :
                new ObjectParameter("con", typeof(string));
    
            var con2Parameter = con2 != null ?
                new ObjectParameter("con2", con2) :
                new ObjectParameter("con2", typeof(string));
    
            var grant_numParameter = grant_num != null ?
                new ObjectParameter("grant_num", grant_num) :
                new ObjectParameter("grant_num", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var period_fromParameter = period_from.HasValue ?
                new ObjectParameter("period_from", period_from) :
                new ObjectParameter("period_from", typeof(System.DateTime));
    
            var period_toParameter = period_to.HasValue ?
                new ObjectParameter("period_to", period_to) :
                new ObjectParameter("period_to", typeof(System.DateTime));
    
            var locodeParameter = locode != null ?
                new ObjectParameter("locode", locode) :
                new ObjectParameter("locode", typeof(string));
    
            var supdistParameter = supdist != null ?
                new ObjectParameter("supdist", supdist) :
                new ObjectParameter("supdist", typeof(string));
    
            var objcodeParameter = objcode != null ?
                new ObjectParameter("objcode", objcode) :
                new ObjectParameter("objcode", typeof(string));
    
            var eoParameter = eo != null ?
                new ObjectParameter("eo", eo) :
                new ObjectParameter("eo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addGrants", conParameter, con2Parameter, grant_numParameter, amountParameter, period_fromParameter, period_toParameter, locodeParameter, supdistParameter, objcodeParameter, eoParameter);
        }
    
        public virtual int addTransfer(Nullable<double> ttp_code, Nullable<double> age_code, string minobj, string tc, string td, string reference, Nullable<System.DateTime> processed, Nullable<System.DateTime> trandate, Nullable<double> tra, Nullable<double> average, string comments, string lupd_user, string con, string supdist, string payreqnum, string payee, string loccode)
        {
            var ttp_codeParameter = ttp_code.HasValue ?
                new ObjectParameter("ttp_code", ttp_code) :
                new ObjectParameter("ttp_code", typeof(double));
    
            var age_codeParameter = age_code.HasValue ?
                new ObjectParameter("age_code", age_code) :
                new ObjectParameter("age_code", typeof(double));
    
            var minobjParameter = minobj != null ?
                new ObjectParameter("minobj", minobj) :
                new ObjectParameter("minobj", typeof(string));
    
            var tcParameter = tc != null ?
                new ObjectParameter("tc", tc) :
                new ObjectParameter("tc", typeof(string));
    
            var tdParameter = td != null ?
                new ObjectParameter("td", td) :
                new ObjectParameter("td", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var processedParameter = processed.HasValue ?
                new ObjectParameter("processed", processed) :
                new ObjectParameter("processed", typeof(System.DateTime));
    
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("trandate", trandate) :
                new ObjectParameter("trandate", typeof(System.DateTime));
    
            var traParameter = tra.HasValue ?
                new ObjectParameter("tra", tra) :
                new ObjectParameter("tra", typeof(double));
    
            var averageParameter = average.HasValue ?
                new ObjectParameter("average", average) :
                new ObjectParameter("average", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            var conParameter = con != null ?
                new ObjectParameter("con", con) :
                new ObjectParameter("con", typeof(string));
    
            var supdistParameter = supdist != null ?
                new ObjectParameter("supdist", supdist) :
                new ObjectParameter("supdist", typeof(string));
    
            var payreqnumParameter = payreqnum != null ?
                new ObjectParameter("payreqnum", payreqnum) :
                new ObjectParameter("payreqnum", typeof(string));
    
            var payeeParameter = payee != null ?
                new ObjectParameter("payee", payee) :
                new ObjectParameter("payee", typeof(string));
    
            var loccodeParameter = loccode != null ?
                new ObjectParameter("loccode", loccode) :
                new ObjectParameter("loccode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addTransfer", ttp_codeParameter, age_codeParameter, minobjParameter, tcParameter, tdParameter, referenceParameter, processedParameter, trandateParameter, traParameter, averageParameter, commentsParameter, lupd_userParameter, conParameter, supdistParameter, payreqnumParameter, payeeParameter, loccodeParameter);
        }
    
        public virtual int addYEG(Nullable<System.DateTime> entered, string by, Nullable<double> age_code, Nullable<double> ytp_code, Nullable<double> fy, Nullable<System.DateTime> processed, Nullable<double> yeg, string grantno, string project, Nullable<double> noyouths, Nullable<double> nohours, string work, string employer, Nullable<System.DateTime> periodfr, Nullable<System.DateTime> periodto, string comments, string lupd_user, Nullable<System.DateTime> lupd_date, string lupd_time, string age, string wage)
        {
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("entered", entered) :
                new ObjectParameter("entered", typeof(System.DateTime));
    
            var byParameter = by != null ?
                new ObjectParameter("by", by) :
                new ObjectParameter("by", typeof(string));
    
            var age_codeParameter = age_code.HasValue ?
                new ObjectParameter("age_code", age_code) :
                new ObjectParameter("age_code", typeof(double));
    
            var ytp_codeParameter = ytp_code.HasValue ?
                new ObjectParameter("ytp_code", ytp_code) :
                new ObjectParameter("ytp_code", typeof(double));
    
            var fyParameter = fy.HasValue ?
                new ObjectParameter("fy", fy) :
                new ObjectParameter("fy", typeof(double));
    
            var processedParameter = processed.HasValue ?
                new ObjectParameter("processed", processed) :
                new ObjectParameter("processed", typeof(System.DateTime));
    
            var yegParameter = yeg.HasValue ?
                new ObjectParameter("yeg", yeg) :
                new ObjectParameter("yeg", typeof(double));
    
            var grantnoParameter = grantno != null ?
                new ObjectParameter("grantno", grantno) :
                new ObjectParameter("grantno", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(string));
    
            var noyouthsParameter = noyouths.HasValue ?
                new ObjectParameter("noyouths", noyouths) :
                new ObjectParameter("noyouths", typeof(double));
    
            var nohoursParameter = nohours.HasValue ?
                new ObjectParameter("nohours", nohours) :
                new ObjectParameter("nohours", typeof(double));
    
            var workParameter = work != null ?
                new ObjectParameter("work", work) :
                new ObjectParameter("work", typeof(string));
    
            var employerParameter = employer != null ?
                new ObjectParameter("employer", employer) :
                new ObjectParameter("employer", typeof(string));
    
            var periodfrParameter = periodfr.HasValue ?
                new ObjectParameter("periodfr", periodfr) :
                new ObjectParameter("periodfr", typeof(System.DateTime));
    
            var periodtoParameter = periodto.HasValue ?
                new ObjectParameter("periodto", periodto) :
                new ObjectParameter("periodto", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            var lupd_dateParameter = lupd_date.HasValue ?
                new ObjectParameter("lupd_date", lupd_date) :
                new ObjectParameter("lupd_date", typeof(System.DateTime));
    
            var lupd_timeParameter = lupd_time != null ?
                new ObjectParameter("lupd_time", lupd_time) :
                new ObjectParameter("lupd_time", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var wageParameter = wage != null ?
                new ObjectParameter("wage", wage) :
                new ObjectParameter("wage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addYEG", enteredParameter, byParameter, age_codeParameter, ytp_codeParameter, fyParameter, processedParameter, yegParameter, grantnoParameter, projectParameter, noyouthsParameter, nohoursParameter, workParameter, employerParameter, periodfrParameter, periodtoParameter, commentsParameter, lupd_userParameter, lupd_dateParameter, lupd_timeParameter, ageParameter, wageParameter);
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual int editGrants(string con, string con2, string grant_num, Nullable<double> amount, Nullable<System.DateTime> period_from, Nullable<System.DateTime> period_to, string loccode, string supdist, string objcode, string eo)
        {
            var conParameter = con != null ?
                new ObjectParameter("con", con) :
                new ObjectParameter("con", typeof(string));
    
            var con2Parameter = con2 != null ?
                new ObjectParameter("con2", con2) :
                new ObjectParameter("con2", typeof(string));
    
            var grant_numParameter = grant_num != null ?
                new ObjectParameter("grant_num", grant_num) :
                new ObjectParameter("grant_num", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(double));
    
            var period_fromParameter = period_from.HasValue ?
                new ObjectParameter("period_from", period_from) :
                new ObjectParameter("period_from", typeof(System.DateTime));
    
            var period_toParameter = period_to.HasValue ?
                new ObjectParameter("period_to", period_to) :
                new ObjectParameter("period_to", typeof(System.DateTime));
    
            var loccodeParameter = loccode != null ?
                new ObjectParameter("loccode", loccode) :
                new ObjectParameter("loccode", typeof(string));
    
            var supdistParameter = supdist != null ?
                new ObjectParameter("supdist", supdist) :
                new ObjectParameter("supdist", typeof(string));
    
            var objcodeParameter = objcode != null ?
                new ObjectParameter("objcode", objcode) :
                new ObjectParameter("objcode", typeof(string));
    
            var eoParameter = eo != null ?
                new ObjectParameter("eo", eo) :
                new ObjectParameter("eo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editGrants", conParameter, con2Parameter, grant_numParameter, amountParameter, period_fromParameter, period_toParameter, loccodeParameter, supdistParameter, objcodeParameter, eoParameter);
        }
    
        public virtual int editTest(Nullable<int> iD, string firstName, string lastName, Nullable<int> scoreA, Nullable<int> scoreB, Nullable<int> scoreC)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var scoreAParameter = scoreA.HasValue ?
                new ObjectParameter("ScoreA", scoreA) :
                new ObjectParameter("ScoreA", typeof(int));
    
            var scoreBParameter = scoreB.HasValue ?
                new ObjectParameter("ScoreB", scoreB) :
                new ObjectParameter("ScoreB", typeof(int));
    
            var scoreCParameter = scoreC.HasValue ?
                new ObjectParameter("ScoreC", scoreC) :
                new ObjectParameter("ScoreC", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editTest", iDParameter, firstNameParameter, lastNameParameter, scoreAParameter, scoreBParameter, scoreCParameter);
        }
    
        public virtual int editTransfers(Nullable<double> tra_code, Nullable<double> ttp_code, Nullable<double> age_code, string minobj, string tc, string td, string reference, Nullable<System.DateTime> processed, Nullable<System.DateTime> trandate, Nullable<double> tra, Nullable<double> average, string comments, string lupd_user, string supdist, string payreqnum, string payee, string loccode)
        {
            var tra_codeParameter = tra_code.HasValue ?
                new ObjectParameter("tra_code", tra_code) :
                new ObjectParameter("tra_code", typeof(double));
    
            var ttp_codeParameter = ttp_code.HasValue ?
                new ObjectParameter("ttp_code", ttp_code) :
                new ObjectParameter("ttp_code", typeof(double));
    
            var age_codeParameter = age_code.HasValue ?
                new ObjectParameter("age_code", age_code) :
                new ObjectParameter("age_code", typeof(double));
    
            var minobjParameter = minobj != null ?
                new ObjectParameter("minobj", minobj) :
                new ObjectParameter("minobj", typeof(string));
    
            var tcParameter = tc != null ?
                new ObjectParameter("tc", tc) :
                new ObjectParameter("tc", typeof(string));
    
            var tdParameter = td != null ?
                new ObjectParameter("td", td) :
                new ObjectParameter("td", typeof(string));
    
            var referenceParameter = reference != null ?
                new ObjectParameter("reference", reference) :
                new ObjectParameter("reference", typeof(string));
    
            var processedParameter = processed.HasValue ?
                new ObjectParameter("processed", processed) :
                new ObjectParameter("processed", typeof(System.DateTime));
    
            var trandateParameter = trandate.HasValue ?
                new ObjectParameter("trandate", trandate) :
                new ObjectParameter("trandate", typeof(System.DateTime));
    
            var traParameter = tra.HasValue ?
                new ObjectParameter("tra", tra) :
                new ObjectParameter("tra", typeof(double));
    
            var averageParameter = average.HasValue ?
                new ObjectParameter("average", average) :
                new ObjectParameter("average", typeof(double));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            var supdistParameter = supdist != null ?
                new ObjectParameter("supdist", supdist) :
                new ObjectParameter("supdist", typeof(string));
    
            var payreqnumParameter = payreqnum != null ?
                new ObjectParameter("payreqnum", payreqnum) :
                new ObjectParameter("payreqnum", typeof(string));
    
            var payeeParameter = payee != null ?
                new ObjectParameter("payee", payee) :
                new ObjectParameter("payee", typeof(string));
    
            var loccodeParameter = loccode != null ?
                new ObjectParameter("loccode", loccode) :
                new ObjectParameter("loccode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editTransfers", tra_codeParameter, ttp_codeParameter, age_codeParameter, minobjParameter, tcParameter, tdParameter, referenceParameter, processedParameter, trandateParameter, traParameter, averageParameter, commentsParameter, lupd_userParameter, supdistParameter, payreqnumParameter, payeeParameter, loccodeParameter);
        }
    
        public virtual int editYEG(Nullable<double> ycr_code, Nullable<System.DateTime> entered, string by, Nullable<double> age_code, Nullable<double> ytp_code, Nullable<double> fy, Nullable<System.DateTime> processed, Nullable<double> yeg, string grantno, string project, Nullable<double> noyouths, Nullable<double> nohours, string work, string employer, Nullable<System.DateTime> periodfr, Nullable<System.DateTime> periodto, string comments, string lupd_user, Nullable<System.DateTime> lupd_date, string lupd_time, string age, string wage)
        {
            var ycr_codeParameter = ycr_code.HasValue ?
                new ObjectParameter("ycr_code", ycr_code) :
                new ObjectParameter("ycr_code", typeof(double));
    
            var enteredParameter = entered.HasValue ?
                new ObjectParameter("entered", entered) :
                new ObjectParameter("entered", typeof(System.DateTime));
    
            var byParameter = by != null ?
                new ObjectParameter("by", by) :
                new ObjectParameter("by", typeof(string));
    
            var age_codeParameter = age_code.HasValue ?
                new ObjectParameter("age_code", age_code) :
                new ObjectParameter("age_code", typeof(double));
    
            var ytp_codeParameter = ytp_code.HasValue ?
                new ObjectParameter("ytp_code", ytp_code) :
                new ObjectParameter("ytp_code", typeof(double));
    
            var fyParameter = fy.HasValue ?
                new ObjectParameter("fy", fy) :
                new ObjectParameter("fy", typeof(double));
    
            var processedParameter = processed.HasValue ?
                new ObjectParameter("processed", processed) :
                new ObjectParameter("processed", typeof(System.DateTime));
    
            var yegParameter = yeg.HasValue ?
                new ObjectParameter("yeg", yeg) :
                new ObjectParameter("yeg", typeof(double));
    
            var grantnoParameter = grantno != null ?
                new ObjectParameter("grantno", grantno) :
                new ObjectParameter("grantno", typeof(string));
    
            var projectParameter = project != null ?
                new ObjectParameter("project", project) :
                new ObjectParameter("project", typeof(string));
    
            var noyouthsParameter = noyouths.HasValue ?
                new ObjectParameter("noyouths", noyouths) :
                new ObjectParameter("noyouths", typeof(double));
    
            var nohoursParameter = nohours.HasValue ?
                new ObjectParameter("nohours", nohours) :
                new ObjectParameter("nohours", typeof(double));
    
            var workParameter = work != null ?
                new ObjectParameter("work", work) :
                new ObjectParameter("work", typeof(string));
    
            var employerParameter = employer != null ?
                new ObjectParameter("employer", employer) :
                new ObjectParameter("employer", typeof(string));
    
            var periodfrParameter = periodfr.HasValue ?
                new ObjectParameter("periodfr", periodfr) :
                new ObjectParameter("periodfr", typeof(System.DateTime));
    
            var periodtoParameter = periodto.HasValue ?
                new ObjectParameter("periodto", periodto) :
                new ObjectParameter("periodto", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("comments", comments) :
                new ObjectParameter("comments", typeof(string));
    
            var lupd_userParameter = lupd_user != null ?
                new ObjectParameter("lupd_user", lupd_user) :
                new ObjectParameter("lupd_user", typeof(string));
    
            var lupd_dateParameter = lupd_date.HasValue ?
                new ObjectParameter("lupd_date", lupd_date) :
                new ObjectParameter("lupd_date", typeof(System.DateTime));
    
            var lupd_timeParameter = lupd_time != null ?
                new ObjectParameter("lupd_time", lupd_time) :
                new ObjectParameter("lupd_time", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            var wageParameter = wage != null ?
                new ObjectParameter("wage", wage) :
                new ObjectParameter("wage", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editYEG", ycr_codeParameter, enteredParameter, byParameter, age_codeParameter, ytp_codeParameter, fyParameter, processedParameter, yegParameter, grantnoParameter, projectParameter, noyouthsParameter, nohoursParameter, workParameter, employerParameter, periodfrParameter, periodtoParameter, commentsParameter, lupd_userParameter, lupd_dateParameter, lupd_timeParameter, ageParameter, wageParameter);
        }
    
        public virtual int FoxProAgenbalancfyAdd(Nullable<int> aGE_CODE, Nullable<int> fY, Nullable<double> aMT_BEG, Nullable<double> aMT_BAS, Nullable<double> aMT_TRA, Nullable<double> aMT_INT, Nullable<double> mTC_EST, Nullable<double> yEG_BEG, Nullable<double> yEG_TOT, Nullable<double> yEG_CAL, Nullable<double> yEG_TRA, Nullable<double> fEE_BEG, Nullable<double> fEE_CAL, Nullable<double> fEE_PAY, string lUPD_USER)
        {
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(int));
    
            var fYParameter = fY.HasValue ?
                new ObjectParameter("FY", fY) :
                new ObjectParameter("FY", typeof(int));
    
            var aMT_BEGParameter = aMT_BEG.HasValue ?
                new ObjectParameter("AMT_BEG", aMT_BEG) :
                new ObjectParameter("AMT_BEG", typeof(double));
    
            var aMT_BASParameter = aMT_BAS.HasValue ?
                new ObjectParameter("AMT_BAS", aMT_BAS) :
                new ObjectParameter("AMT_BAS", typeof(double));
    
            var aMT_TRAParameter = aMT_TRA.HasValue ?
                new ObjectParameter("AMT_TRA", aMT_TRA) :
                new ObjectParameter("AMT_TRA", typeof(double));
    
            var aMT_INTParameter = aMT_INT.HasValue ?
                new ObjectParameter("AMT_INT", aMT_INT) :
                new ObjectParameter("AMT_INT", typeof(double));
    
            var mTC_ESTParameter = mTC_EST.HasValue ?
                new ObjectParameter("MTC_EST", mTC_EST) :
                new ObjectParameter("MTC_EST", typeof(double));
    
            var yEG_BEGParameter = yEG_BEG.HasValue ?
                new ObjectParameter("YEG_BEG", yEG_BEG) :
                new ObjectParameter("YEG_BEG", typeof(double));
    
            var yEG_TOTParameter = yEG_TOT.HasValue ?
                new ObjectParameter("YEG_TOT", yEG_TOT) :
                new ObjectParameter("YEG_TOT", typeof(double));
    
            var yEG_CALParameter = yEG_CAL.HasValue ?
                new ObjectParameter("YEG_CAL", yEG_CAL) :
                new ObjectParameter("YEG_CAL", typeof(double));
    
            var yEG_TRAParameter = yEG_TRA.HasValue ?
                new ObjectParameter("YEG_TRA", yEG_TRA) :
                new ObjectParameter("YEG_TRA", typeof(double));
    
            var fEE_BEGParameter = fEE_BEG.HasValue ?
                new ObjectParameter("FEE_BEG", fEE_BEG) :
                new ObjectParameter("FEE_BEG", typeof(double));
    
            var fEE_CALParameter = fEE_CAL.HasValue ?
                new ObjectParameter("FEE_CAL", fEE_CAL) :
                new ObjectParameter("FEE_CAL", typeof(double));
    
            var fEE_PAYParameter = fEE_PAY.HasValue ?
                new ObjectParameter("FEE_PAY", fEE_PAY) :
                new ObjectParameter("FEE_PAY", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgenbalancfyAdd", aGE_CODEParameter, fYParameter, aMT_BEGParameter, aMT_BASParameter, aMT_TRAParameter, aMT_INTParameter, mTC_ESTParameter, yEG_BEGParameter, yEG_TOTParameter, yEG_CALParameter, yEG_TRAParameter, fEE_BEGParameter, fEE_CALParameter, fEE_PAYParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgenbalancfyEdit(Nullable<double> aBF_CODE, Nullable<int> fY, Nullable<double> aMT_BEG, Nullable<double> aMT_BAS, Nullable<double> aMT_TRA, Nullable<double> aMT_INT, Nullable<double> mTC_EST, Nullable<double> yEG_BEG, Nullable<double> yEG_TOT, Nullable<double> yEG_CAL, Nullable<double> yEG_TRA, Nullable<double> fEE_BEG, Nullable<double> fEE_CAL, Nullable<double> fEE_PAY, string lUPD_USER)
        {
            var aBF_CODEParameter = aBF_CODE.HasValue ?
                new ObjectParameter("ABF_CODE", aBF_CODE) :
                new ObjectParameter("ABF_CODE", typeof(double));
    
            var fYParameter = fY.HasValue ?
                new ObjectParameter("FY", fY) :
                new ObjectParameter("FY", typeof(int));
    
            var aMT_BEGParameter = aMT_BEG.HasValue ?
                new ObjectParameter("AMT_BEG", aMT_BEG) :
                new ObjectParameter("AMT_BEG", typeof(double));
    
            var aMT_BASParameter = aMT_BAS.HasValue ?
                new ObjectParameter("AMT_BAS", aMT_BAS) :
                new ObjectParameter("AMT_BAS", typeof(double));
    
            var aMT_TRAParameter = aMT_TRA.HasValue ?
                new ObjectParameter("AMT_TRA", aMT_TRA) :
                new ObjectParameter("AMT_TRA", typeof(double));
    
            var aMT_INTParameter = aMT_INT.HasValue ?
                new ObjectParameter("AMT_INT", aMT_INT) :
                new ObjectParameter("AMT_INT", typeof(double));
    
            var mTC_ESTParameter = mTC_EST.HasValue ?
                new ObjectParameter("MTC_EST", mTC_EST) :
                new ObjectParameter("MTC_EST", typeof(double));
    
            var yEG_BEGParameter = yEG_BEG.HasValue ?
                new ObjectParameter("YEG_BEG", yEG_BEG) :
                new ObjectParameter("YEG_BEG", typeof(double));
    
            var yEG_TOTParameter = yEG_TOT.HasValue ?
                new ObjectParameter("YEG_TOT", yEG_TOT) :
                new ObjectParameter("YEG_TOT", typeof(double));
    
            var yEG_CALParameter = yEG_CAL.HasValue ?
                new ObjectParameter("YEG_CAL", yEG_CAL) :
                new ObjectParameter("YEG_CAL", typeof(double));
    
            var yEG_TRAParameter = yEG_TRA.HasValue ?
                new ObjectParameter("YEG_TRA", yEG_TRA) :
                new ObjectParameter("YEG_TRA", typeof(double));
    
            var fEE_BEGParameter = fEE_BEG.HasValue ?
                new ObjectParameter("FEE_BEG", fEE_BEG) :
                new ObjectParameter("FEE_BEG", typeof(double));
    
            var fEE_CALParameter = fEE_CAL.HasValue ?
                new ObjectParameter("FEE_CAL", fEE_CAL) :
                new ObjectParameter("FEE_CAL", typeof(double));
    
            var fEE_PAYParameter = fEE_PAY.HasValue ?
                new ObjectParameter("FEE_PAY", fEE_PAY) :
                new ObjectParameter("FEE_PAY", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgenbalancfyEdit", aBF_CODEParameter, fYParameter, aMT_BEGParameter, aMT_BASParameter, aMT_TRAParameter, aMT_INTParameter, mTC_ESTParameter, yEG_BEGParameter, yEG_TOTParameter, yEG_CALParameter, yEG_TRAParameter, fEE_BEGParameter, fEE_CALParameter, fEE_PAYParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgenbalanmonthADD(Nullable<double> aGE_CODE, Nullable<int> fY, Nullable<int> yEAR, Nullable<int> mONTH, Nullable<double> aMT_BEG, Nullable<double> aMT_BAS, Nullable<double> aMT_TRA, Nullable<double> aMT_INT, Nullable<double> fEE_PAY, Nullable<double> aVERAGE, string lUPD_USER)
        {
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(double));
    
            var fYParameter = fY.HasValue ?
                new ObjectParameter("FY", fY) :
                new ObjectParameter("FY", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(int));
    
            var aMT_BEGParameter = aMT_BEG.HasValue ?
                new ObjectParameter("AMT_BEG", aMT_BEG) :
                new ObjectParameter("AMT_BEG", typeof(double));
    
            var aMT_BASParameter = aMT_BAS.HasValue ?
                new ObjectParameter("AMT_BAS", aMT_BAS) :
                new ObjectParameter("AMT_BAS", typeof(double));
    
            var aMT_TRAParameter = aMT_TRA.HasValue ?
                new ObjectParameter("AMT_TRA", aMT_TRA) :
                new ObjectParameter("AMT_TRA", typeof(double));
    
            var aMT_INTParameter = aMT_INT.HasValue ?
                new ObjectParameter("AMT_INT", aMT_INT) :
                new ObjectParameter("AMT_INT", typeof(double));
    
            var fEE_PAYParameter = fEE_PAY.HasValue ?
                new ObjectParameter("FEE_PAY", fEE_PAY) :
                new ObjectParameter("FEE_PAY", typeof(double));
    
            var aVERAGEParameter = aVERAGE.HasValue ?
                new ObjectParameter("AVERAGE", aVERAGE) :
                new ObjectParameter("AVERAGE", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgenbalanmonthADD", aGE_CODEParameter, fYParameter, yEARParameter, mONTHParameter, aMT_BEGParameter, aMT_BASParameter, aMT_TRAParameter, aMT_INTParameter, fEE_PAYParameter, aVERAGEParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgenbalanmonthEdit(Nullable<double> aBM_CODE, Nullable<int> fY, Nullable<int> yEAR, Nullable<int> mONTH, Nullable<double> aMT_BEG, Nullable<double> aMT_BAS, Nullable<double> aMT_TRA, Nullable<double> aMT_INT, Nullable<double> fEE_PAY, Nullable<double> aVERAGE, string lUPD_USER)
        {
            var aBM_CODEParameter = aBM_CODE.HasValue ?
                new ObjectParameter("ABM_CODE", aBM_CODE) :
                new ObjectParameter("ABM_CODE", typeof(double));
    
            var fYParameter = fY.HasValue ?
                new ObjectParameter("FY", fY) :
                new ObjectParameter("FY", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mONTHParameter = mONTH.HasValue ?
                new ObjectParameter("MONTH", mONTH) :
                new ObjectParameter("MONTH", typeof(int));
    
            var aMT_BEGParameter = aMT_BEG.HasValue ?
                new ObjectParameter("AMT_BEG", aMT_BEG) :
                new ObjectParameter("AMT_BEG", typeof(double));
    
            var aMT_BASParameter = aMT_BAS.HasValue ?
                new ObjectParameter("AMT_BAS", aMT_BAS) :
                new ObjectParameter("AMT_BAS", typeof(double));
    
            var aMT_TRAParameter = aMT_TRA.HasValue ?
                new ObjectParameter("AMT_TRA", aMT_TRA) :
                new ObjectParameter("AMT_TRA", typeof(double));
    
            var aMT_INTParameter = aMT_INT.HasValue ?
                new ObjectParameter("AMT_INT", aMT_INT) :
                new ObjectParameter("AMT_INT", typeof(double));
    
            var fEE_PAYParameter = fEE_PAY.HasValue ?
                new ObjectParameter("FEE_PAY", fEE_PAY) :
                new ObjectParameter("FEE_PAY", typeof(double));
    
            var aVERAGEParameter = aVERAGE.HasValue ?
                new ObjectParameter("AVERAGE", aVERAGE) :
                new ObjectParameter("AVERAGE", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgenbalanmonthEdit", aBM_CODEParameter, fYParameter, yEARParameter, mONTHParameter, aMT_BEGParameter, aMT_BASParameter, aMT_TRAParameter, aMT_INTParameter, fEE_PAYParameter, aVERAGEParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgenbenefitsEdit(Nullable<double> aBA_CODE, Nullable<double> bAS_CODE, Nullable<int> aGE_CODE, Nullable<double> bAS, Nullable<double> fEE, Nullable<double> aVERAGE, string lUPD_USER)
        {
            var aBA_CODEParameter = aBA_CODE.HasValue ?
                new ObjectParameter("ABA_CODE", aBA_CODE) :
                new ObjectParameter("ABA_CODE", typeof(double));
    
            var bAS_CODEParameter = bAS_CODE.HasValue ?
                new ObjectParameter("BAS_CODE", bAS_CODE) :
                new ObjectParameter("BAS_CODE", typeof(double));
    
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(int));
    
            var bASParameter = bAS.HasValue ?
                new ObjectParameter("BAS", bAS) :
                new ObjectParameter("BAS", typeof(double));
    
            var fEEParameter = fEE.HasValue ?
                new ObjectParameter("FEE", fEE) :
                new ObjectParameter("FEE", typeof(double));
    
            var aVERAGEParameter = aVERAGE.HasValue ?
                new ObjectParameter("AVERAGE", aVERAGE) :
                new ObjectParameter("AVERAGE", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgenbenefitsEdit", aBA_CODEParameter, bAS_CODEParameter, aGE_CODEParameter, bASParameter, fEEParameter, aVERAGEParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgencyAdd(string aGENCY, string nAME, Nullable<int> aTP_CODE, Nullable<int> dIS_CODE, string aDR1, string aDR2, string cITY, Nullable<int> zIP, Nullable<double> aMTMTC, Nullable<double> aMTDEV, Nullable<double> aMTYEG, string lUPD_USER)
        {
            var aGENCYParameter = aGENCY != null ?
                new ObjectParameter("AGENCY", aGENCY) :
                new ObjectParameter("AGENCY", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var aTP_CODEParameter = aTP_CODE.HasValue ?
                new ObjectParameter("ATP_CODE", aTP_CODE) :
                new ObjectParameter("ATP_CODE", typeof(int));
    
            var dIS_CODEParameter = dIS_CODE.HasValue ?
                new ObjectParameter("DIS_CODE", dIS_CODE) :
                new ObjectParameter("DIS_CODE", typeof(int));
    
            var aDR1Parameter = aDR1 != null ?
                new ObjectParameter("ADR1", aDR1) :
                new ObjectParameter("ADR1", typeof(string));
    
            var aDR2Parameter = aDR2 != null ?
                new ObjectParameter("ADR2", aDR2) :
                new ObjectParameter("ADR2", typeof(string));
    
            var cITYParameter = cITY != null ?
                new ObjectParameter("CITY", cITY) :
                new ObjectParameter("CITY", typeof(string));
    
            var zIPParameter = zIP.HasValue ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(int));
    
            var aMTMTCParameter = aMTMTC.HasValue ?
                new ObjectParameter("AMTMTC", aMTMTC) :
                new ObjectParameter("AMTMTC", typeof(double));
    
            var aMTDEVParameter = aMTDEV.HasValue ?
                new ObjectParameter("AMTDEV", aMTDEV) :
                new ObjectParameter("AMTDEV", typeof(double));
    
            var aMTYEGParameter = aMTYEG.HasValue ?
                new ObjectParameter("AMTYEG", aMTYEG) :
                new ObjectParameter("AMTYEG", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgencyAdd", aGENCYParameter, nAMEParameter, aTP_CODEParameter, dIS_CODEParameter, aDR1Parameter, aDR2Parameter, cITYParameter, zIPParameter, aMTMTCParameter, aMTDEVParameter, aMTYEGParameter, lUPD_USERParameter);
        }
    
        public virtual int FoxProAgencyEdit(Nullable<int> aGE_CODE, string aGENCY, string nAME, Nullable<int> aTP_CODE, Nullable<int> dIS_CODE, string aDR1, string aDR2, string cITY, Nullable<int> zIP, Nullable<double> aMTMTC, Nullable<double> aMTDEV, Nullable<double> aMTYEG, string lUPD_USER)
        {
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(int));
    
            var aGENCYParameter = aGENCY != null ?
                new ObjectParameter("AGENCY", aGENCY) :
                new ObjectParameter("AGENCY", typeof(string));
    
            var nAMEParameter = nAME != null ?
                new ObjectParameter("NAME", nAME) :
                new ObjectParameter("NAME", typeof(string));
    
            var aTP_CODEParameter = aTP_CODE.HasValue ?
                new ObjectParameter("ATP_CODE", aTP_CODE) :
                new ObjectParameter("ATP_CODE", typeof(int));
    
            var dIS_CODEParameter = dIS_CODE.HasValue ?
                new ObjectParameter("DIS_CODE", dIS_CODE) :
                new ObjectParameter("DIS_CODE", typeof(int));
    
            var aDR1Parameter = aDR1 != null ?
                new ObjectParameter("ADR1", aDR1) :
                new ObjectParameter("ADR1", typeof(string));
    
            var aDR2Parameter = aDR2 != null ?
                new ObjectParameter("ADR2", aDR2) :
                new ObjectParameter("ADR2", typeof(string));
    
            var cITYParameter = cITY != null ?
                new ObjectParameter("CITY", cITY) :
                new ObjectParameter("CITY", typeof(string));
    
            var zIPParameter = zIP.HasValue ?
                new ObjectParameter("ZIP", zIP) :
                new ObjectParameter("ZIP", typeof(int));
    
            var aMTMTCParameter = aMTMTC.HasValue ?
                new ObjectParameter("AMTMTC", aMTMTC) :
                new ObjectParameter("AMTMTC", typeof(double));
    
            var aMTDEVParameter = aMTDEV.HasValue ?
                new ObjectParameter("AMTDEV", aMTDEV) :
                new ObjectParameter("AMTDEV", typeof(double));
    
            var aMTYEGParameter = aMTYEG.HasValue ?
                new ObjectParameter("AMTYEG", aMTYEG) :
                new ObjectParameter("AMTYEG", typeof(double));
    
            var lUPD_USERParameter = lUPD_USER != null ?
                new ObjectParameter("LUPD_USER", lUPD_USER) :
                new ObjectParameter("LUPD_USER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FoxProAgencyEdit", aGE_CODEParameter, aGENCYParameter, nAMEParameter, aTP_CODEParameter, dIS_CODEParameter, aDR1Parameter, aDR2Parameter, cITYParameter, zIPParameter, aMTMTCParameter, aMTDEVParameter, aMTYEGParameter, lUPD_USERParameter);
        }
    
        public virtual ObjectResult<FoxProReport_YouthEmploymentGoal_Result> FoxProReport_YouthEmploymentGoal(Nullable<double> aGE_CODE)
        {
            var aGE_CODEParameter = aGE_CODE.HasValue ?
                new ObjectParameter("AGE_CODE", aGE_CODE) :
                new ObjectParameter("AGE_CODE", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FoxProReport_YouthEmploymentGoal_Result>("FoxProReport_YouthEmploymentGoal", aGE_CODEParameter);
        }
    
        public virtual int insertTest(string firstName, string lastName, Nullable<int> scoreA, Nullable<int> scoreB, Nullable<int> scoreC)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var scoreAParameter = scoreA.HasValue ?
                new ObjectParameter("ScoreA", scoreA) :
                new ObjectParameter("ScoreA", typeof(int));
    
            var scoreBParameter = scoreB.HasValue ?
                new ObjectParameter("ScoreB", scoreB) :
                new ObjectParameter("ScoreB", typeof(int));
    
            var scoreCParameter = scoreC.HasValue ?
                new ObjectParameter("ScoreC", scoreC) :
                new ObjectParameter("ScoreC", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTest", firstNameParameter, lastNameParameter, scoreAParameter, scoreBParameter, scoreCParameter);
        }
    }
}
